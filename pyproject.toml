[tool.poetry]
name = "meltano-tap-linkedin-ads"
version = "0.0.0"
description = "`tap-linkedin-ads` is a Singer tap for linkedin, built with the Meltano SDK for Singer Taps."
authors = ["Meltano <hello@meltano.com>"]
keywords = [
    "ELT",
    "linkedin",
]
license = "Elastic-2.0"
packages = [
    { include = "tap_linkedin_ads" },
]
readme = "README.md"

[tool.poetry.dependencies]
python = "<3.12,>=3.7.1"
pendulum = "^2.1.2"
requests = "^2.31.0"
singer-sdk = ">=0.27,<0.33"

[tool.poetry.group.dev.dependencies]
singer-sdk = {version = "*", extras = ["testing"]}

[build-system]
requires = ["poetry-core==1.6.1", "poetry-dynamic-versioning"]
build-backend = "poetry_dynamic_versioning.backend"

[tool.poetry.scripts]
# CLI declaration
tap-linkedin-ads = 'tap_linkedin_ads.tap:TapLinkedInAds.cli'

[tool.poetry-dynamic-versioning]
enable = true

[tool.ruff]
ignore = [
    "ANN101",  # Missing type annotation for self in method
    "DJ",      # Django
    "PD",      # Pandas
    "D101",    # Missing docstring in public class
    "D102",    # Missing docstring in public method
    "FIX002",  # line-contains-todo
]
line-length = 100
select = ["ALL"]
target-version = "py37"

[tool.ruff.flake8-import-conventions]
banned-from = ["typing"]

[tool.ruff.flake8-import-conventions.extend-aliases]
typing = "t"

[tool.ruff.isort]
known-first-party = ["tap_linkedin"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.per-file-ignores]
"tap_linkedin_ads/streams.py" = [
    "RUF012",  # mutable-class-default
]
"tests/*" = [
    "ANN201",  # Missing return type annotation for public function
]

[tool.ruff.pydocstyle]
convention = "google"
